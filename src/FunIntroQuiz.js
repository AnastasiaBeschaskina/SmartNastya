import { useState } from "react";
import { Button } from "./components/button.js";
import "./components/button.css";

const questions = [
  {
    question: "–ö—Ç–æ –ª—É—á—à–∏–π wealth-–º–µ–Ω–µ–¥–∂–µ—Ä –≤ SMARTGEN?",
    correctAnswers: ["–ù–∞—Å—Ç—è", "Nastya", "Anastasia"],
  },
  {
    question: "–ö–æ–≥–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±—è—Ç –∫–ª–∏–µ–Ω—Ç—ã?",
    correctAnswers: ["–ù–∞—Å—Ç—è", "Nastya", "Anastasia"],
  },
  {
    question: "–ö—Ç–æ —Å–∞–º—ã–π —É–º–Ω—ã–π –≤ –∫–æ–º–∞–Ω–¥–µ?",
    correctAnswers: ["–ù–∞—Å—Ç—è", "Nastya", "Anastasia"],
  },
  {
    question: "–ö—Ç–æ –Ω–µ –ª—é–±–∏—Ç —à–∞—à–ª—ã–∫–∏?",
    correctAnswers: ["–ù–∞—Å—Ç—è", "Nastya", "Anastasia"],
  },
];

export default function FunIntroQuiz() {
  const [started, setStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answer, setAnswer] = useState("");
  const [error, setError] = useState("");
  const [attempts, setAttempts] = useState(0);
  const [showSuccess, setShowSuccess] = useState(false);

  const isLastQuestion = currentQuestion === questions.length - 1;

  const handleCheck = () => {
    const answerNormalized = answer.trim().toLowerCase();
    const currentCorrectAnswers = questions[currentQuestion].correctAnswers;

    const isCorrect = currentCorrectAnswers.some(
      (correct) => correct.toLowerCase() === answerNormalized
    );

    if (isCorrect) {
      setShowSuccess(true);
      setError("");

      setTimeout(() => {
        setShowSuccess(false);
        setAnswer("");
        setAttempts(0);
        setCurrentQuestion((prev) => (isLastQuestion ? prev : prev + 1));
      }, 2500); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö 1.5 —Å–µ–∫—É–Ω–¥—ã
    } else {
      setAttempts((prev) => {
        const newAttempts = prev + 1;

        if (newAttempts === 1) {
          setError(
            "üî• –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ ¬´–ê–Ω–∞—Å—Ç–∞¬ª –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ¬´—Å–∏—è¬ª"
          );
        } else if (newAttempts === 2) {
          setError(
            "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å! ¬´–ê–Ω–∞—Å—Ç–∞.....¬ª"
          );
        } else if (answerNormalized.includes("–º–∞—Ä–∫")) {
          setError("üî• –ü–æ—á—Ç–∏! '–ú–∞—Ä–∫' ‚Äî –±–ª–∏–∑–∫–æ, –ø–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑.");
        } else {
          setError("‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!");
        }

        return newAttempts;
      });
    }
  };

  return (
    <div
      className="flex flex-col items-center justify-center min-h-screen p-8 bg-gradient-to-b from-pink-100 to-yellow-100 text-center"
      style={{
        background: "rgba(255, 255, 255, 0.2)",
        color: "#111",
        borderRadius: "16px",
        padding: "52px",
        maxWidth: "600px",
        width: "100%",
        boxShadow: "0 8px 24px rgba(0, 0, 0, 0.15)",
        margin: "0 auto",
      }}
    >
      {!started ? (
        <div>
          <h1 className="text-3xl font-bold mb-4">–ü—Ä–∏–≤–µ—Ç, –∫–æ–ª–ª–µ–≥–∏!</h1>
          <h2 className="text-xl mb-6">
            –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∑–Ω–∞–µ—Ç–µ –≤—Å—é –ø—Ä–∞–≤–¥—É –æ–±–æ –º–Ω–µ‚Ä¶
          </h2>
          <Button onClick={() => setStarted(true)}>–ù–∞—á–Ω–µ–º</Button>
        </div>
      ) : (
        <div className="max-w-md w-full">
          {showSuccess ? (
            <div className="flex flex-col items-center gap-4">
              <p className="text-lg font-bold text-green-700">
                –í–µ—Ä–Ω–æ! –≠—Ç–æ —è üòé
              </p>
              <img src={process.env.PUBLIC_URL + "/—Å—Ç–∏–∫–µ—Ä –ª–∏—Ü–æ.png"} alt="–ù–∞—Å—Ç—è" />
            </div>
          ) : (
            <>
              <h2 className="text-2xl font-semibold mb-4">
                {questions[currentQuestion].question}
              </h2>
              <div className="flex flex-col gap-4">
                <input
                  type="text"
                  value={answer}
                  onChange={(e) => setAnswer(e.target.value)}
                  style={{ textAlign: "center" }}
                />
                {!isLastQuestion && (
                  <Button onClick={handleCheck}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</Button>
                )}
                {error && <p className="text-red-600 mt-2">{error}</p>}
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
}
